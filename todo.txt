230424-28
    [] Resume of work left in order to public the first version of the website:
        [] List editing
            [] Add edition form to the lists too.
            [] Add posibility of summing one watched episode or read chapter
            [] Add comment column on list entries. It will display a hidden div on hover.
        [] Activity
            [] Create a post when user register an activity.
            [] Make `post_anime` and `post_manga` so it's possible to filter posts about X anime|manga later. Similar to a hashtag system.
            [] Add post liking system.
            [] Add post replying system.
            [] Add a single page for each post.
        [] Social activites
            [] Create a following system.
            [] Add a private message system.
        [] Home pages
            [] Main home page.
                [] Add a post time line (following and global) if user is logged in.
                [] Add watching animes and mangas, and make summing one episode to both possible.
        [] User stuff
             [] Make profile editing available. (No picture or header yet)
             [] Support follow, post likes and replies notifications. Also PM ones.
             [] Support post deletion.

230417
    [-] Work on user posting and activity.
        Creation and displaying of posts in profile is done.

230409-15
    [X] Add anime and manga views to the ranking section.
    [X] Complete the review ecosystem.

230405
    [X] Make lists show maximun episode|chapter progress if status is completed.
    [-] Complete profile lists front-end.
        [X] Grouping by status (not show a group if it doesn't have any).
        [] Hovering effects depends on the action (click name -> go to entry listing. general hover -> show entry edit form. progress hover -> show + and - to edit it).

230404
    [X] Validate list entry edition form data.
        Had to rewrite many things in order to protect the controllers from accepting incorrect form input values or form action destinations.
    [] Write list entry single page and complete profile lists.

230330
    [X] Rework medium entry listing way of displaying the URI.
        /anime?id=1 to /anime/Gintama (it will replace spaces for hyphens when needed).
    
230329
    [X] Make progress on lists and think if merging animelist and mangalist code is useful.
        Views are merged into _listsprofile.view.php.
    [-] Complete overview tab (except posts) and make initial favorites tab.
        Not sure about implementing favorites on the overview tab. Rest is done.
    [] Work on the reviews system.

230328
    [X] Make profile controller only display content on $_GET URI's. If not, displays /404.
    [X] Make anime and manga stats dynamic.
    [X] Work on user relations with anime and manga.
        It's now possible to favorite something out.
        Added `status` to the anime|mangalist tables. Will add the front-end once research about <select> is done.

    [X] Profile URI's.
        Nevermind about $_get. A second router file was made only for clear URLs. (eg. /nabuna, /nabuna/animelist, etc.).
        Every URI will go over main router. If it's not found in these routes, it will pass over to the profile router to find for usernames. If not found again, it will /404.

230327
    [-] Think of user profile URI's.
        Will go with $_GET until learning more about URI's, htaccess stuff or etc.

230324
    [X] Add session management and auto-login to the register and login methods.
        For now, I'm only using 3 cookies: session(Yes|No), user_id and username. Auto-login and logout both work.
    [X] Make the login controller.
    [-] Work on the profile page. Start to think on the relation of users with data and make the design.
        Everything but relation of user to data.

230323
    [X] Add an id colorful submit and style it just on main.css.
    [X] User registration validation form.
        Should be a pretty premature one. It will change and be more specific and secure in the future, but it will do for now.
    [-] User login validation form.
        Simply the HTML is done. Authentication and session management is still needed.
    [] Make user profile page.

230322
    [X] Learn about classes
    [X] Implement a Database class
        Implemented the database connection as a constructor for the class. The class will be called in Class definition files and not controllers.
    [X] Implement a Listing class
        Querying anime/manga/vn info is now completely dynamic. Only unifying the query page view is left.
    [] Implement an AddData class and merge the edit and submit form up.

230318/19
    [X] Add timestamp to relational data tables (review_X, submit_X, etc.).
        I've added timestamp to both individual data tables and relational ones. Just in case for now.
    [] Finish up the manga and vn pages for once...
    [] First steps to user system.
        [] Registration and login.
        [] Session management with the purpose of adding autorship to things.
    [X] Header into /submit after inserting data in the submit form and closing the connections.
        Decided to keep the ugly URI after submission (/submit?anime) and display an OK message to the user in that page.
23031X
    [] Simplify listing stuff. Probably covert every query stuff into a class.
    [X] Finish up everything needed before starting with user stuff tomorrow.
        Edition and submission is partly completed, so user system implementation can be started.
    [X] Do the controller for anime submission form.
        This was referring to the edit part of user data submission. It has been changed to an independent edit page and that is currently completed.

230311
    [X] Fix submit page not working when no anime_id provided.
    [] Finish up the submit.php controller. (It will deliver information to a submit_x table).
    [X] Create an anime home page that displays the database entries that link to ?anime_id=X and show its information.

230307
    [-] Create the submit page (basic for now).
        The HTML has been created (it displays one input field for each column that can be edited by the user)
    [] Create the manga page.
    [] Start thinking about the profile tab.

23030X
    [X] Learn to use JSON:
        [X] Understand what it is,
        [-] think of possible usages and implement it (first usage will be to fetch information from the anime's submit page).
                json_encode & json_decode for everything I need I feel like. JSON will be inserted in the database through these two functions. I will not yet implement it.
    [] Create a general entry submit page:
        [] Think if doing a single general submit page (where the user could submit every submittable thing of the website) is feasible,
        [] implement it, inluding JSON data.
    [] Continue to learn about mysqli and code safety.

230301
    [X] Work on anime query page.
            `user`, `anime`, `character`, `character_anime`, `staff`, `staff_anime`, `review` and `review_anime` have been worked on. They are functional, but pretty much not final.
            The page is written, but the CSS classes should probably be simplified. I'm not too sure about that since what I've done could also be beneficial in a redesign case, and not many CSS lines got repeated tbh.
            PHP should definitely be rewritten though, especially the info fetching; that seems so redundant.
230226
    [] Continue to learn about mysqli and code safety.
    [] Implement moderator's anime and manga submission system.
    [] Complete the anime and manga query pages. Redesign is important (headers for each box and different buttons for users)
            `character` has been finished. relational tables will be `character_anime`, `character_manga` and `character_vn` for now.
            I feel like this system should be simplified, but for now it works.

230225
    [X] Continue to learn about mysqli and code safety.
    [] Implement moderator's anime and manga submission system.
    [-] Complete the anime and manga query pages. Redesign is important (headers for each box and different buttons for users)
            I don't think I'll redesign for now. Headers didn't seem to work out.
            `character` and `reviews` tables need to be made for this. I'm thinking on adding JSON to this table, as a character can have much information not worthy of a database column.

230224
    [] Continue to learn about mysqli and code safety.
    [] Implement moderator's anime and manga submission system.
    [] Complete the anime and manga query pages. Redesign is important (headers for each box and different buttons for users).

230223
    [] Continue to learn about mysqli and code safety.
    [] Implement anime and manga submission system.
    [] Complete the anime and manga queried pages. Redesign is important (headers for each box and different buttons for users).

230222
    [X] Read PDO documentation from http://web.archive.org/web/20190330214051/http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers
            Noticed PDO works basically the same way as mysqli but is compatible with more drivers than mysql. Also, that OO mysqli is like an alias to procedural style.
            Result: I will use Object Oriended mysqli.
    [X] Understand how to call the conexion on multiples files (for example, through a global variable?).
            This can be investigated further, and it will be in the future. For now, I'll store credentials on a separate file and include it in .gitignore.
    [X] Complete `anime`, `manga` and `user` tables.








index.php
    show unlogged main page if user is not logged in
    show ikanaide feed if logged in
profile.php
    show feed by default
    show follows and followers (not sure if to make a friends system or follow, probably follow)
    tabs: timeline, anime, manga, reviews and favorites
anime.php
    show each anime here (not sure if I should do a main page for this, im pretty sure I will do it)
manga.php
    same stuff
rankings.php
    show rankings for each category
community.php
    not sure if to call it community (maybe ill go with `explore`). show everything community related here

--- back-end ---
sql
    tables structure must allow:
        login system and user information
        user property for website content
        social interaction
database
    ranking score calculation
    auto-update status of shows

--- singles ---
timeline feed


--- extras ---
I would like to do something like Taiga for Ikanaide, though I feel like asking Taiga for Ikanaide implementation would be better at the start; taiga users could discover the website through the app.
If this ends up happening, I would never develop my own and instead promote theirs on the Ikanaide website.
