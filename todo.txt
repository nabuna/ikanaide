220313
    [] Simplify listing stuff. Probably covert every query stuff into a class.
    [] Finish up everything needed before starting with user stuff tomorrow.
    [] Do the controller for anime submission form.

220311
    [X] Fix submit page not working when no anime_id provided.
    [] Finish up the submit.php controller. (It will deliver information to a submit_x table).
    [X] Create an anime home page that displays the database entries that link to ?anime_id=X and show its information.

220307
    [-] Create the submit page (basic for now).
        The HTML has been created (it displays one input field for each column that can be edited by the user)
    [] Create the manga page.
    [] Start thinking about the profile tab.

22030X
    [X] Learn to use JSON:
        [X] Understand what it is,
        [-] think of possible usages and implement it (first usage will be to fetch information from the anime's submit page).
                json_encode & json_decode for everything I need I feel like. JSON will be inserted in the database through these two functions. I will not yet implement it.
    [] Create a general entry submit page:
        [] Think if doing a single general submit page (where the user could submit every submittable thing of the website) is feasible,
        [] implement it, inluding JSON data.
    [] Continue to learn about mysqli and code safety.

220301
    [X] Work on anime query page.
            `user`, `anime`, `character`, `character_anime`, `staff`, `staff_anime`, `review` and `review_anime` have been worked on. They are functional, but pretty much not final.
            The page is written, but the CSS classes should probably be simplified. I'm not too sure about that since what I've done could also be beneficial in a redesign case, and not many CSS lines got repeated tbh.
            PHP should definitely be rewritten though, especially the info fetching; that seems so redundant.
220226
    [] Continue to learn about mysqli and code safety.
    [] Implement moderator's anime and manga submission system.
    [] Complete the anime and manga query pages. Redesign is important (headers for each box and different buttons for users)
            `character` has been finished. relational tables will be `character_anime`, `character_manga` and `character_vn` for now.
            I feel like this system should be simplified, but for now it works.

220225
    [] Continue to learn about mysqli and code safety.
    [] Implement moderator's anime and manga submission system.
    [-] Complete the anime and manga query pages. Redesign is important (headers for each box and different buttons for users)
            I don't think I'll redesign for now. Headers didn't seem to work out.
            `character` and `reviews` tables need to be made for this. I'm thinking on adding JSON to this table, as a character can have much information not worthy of a database column.

220224
    [] Continue to learn about mysqli and code safety.
    [] Implement moderator's anime and manga submission system.
    [] Complete the anime and manga query pages. Redesign is important (headers for each box and different buttons for users).

220223
    [] Continue to learn about mysqli and code safety.
    [] Implement anime and manga submission system.
    [] Complete the anime and manga queried pages. Redesign is important (headers for each box and different buttons for users).

220222
    [X] Read PDO documentation from http://web.archive.org/web/20190330214051/http://wiki.hashphp.org/PDO_Tutorial_for_MySQL_Developers
            Noticed PDO works basically the same way as mysqli but is compatible with more drivers than mysql. Also, that OO mysqli is like an alias to procedural style.
            Result: I will use Object Oriended mysqli.
    [X] Understand how to call the conexion on multiples files (for example, through a global variable?).
            This can be investigated further, and it will be in the future. For now, I'll store credentials on a separate file and include it in .gitignore.
    [X] Complete `anime`, `manga` and `user` tables.








index.php
    show unlogged main page if user is not logged in
    show ikanaide feed if logged in
profile.php
    show feed by default
    show follows and followers (not sure if to make a friends system or follow, probably follow)
    tabs: timeline, anime, manga, reviews and favorites
anime.php
    show each anime here (not sure if I should do a main page for this, im pretty sure I will do it)
manga.php
    same stuff
rankings.php
    show rankings for each category
community.php
    not sure if to call it community (maybe ill go with `explore`). show everything community related here

--- back-end ---
sql
    tables structure must allow:
        login system and user information
        user property for website content
        social interaction
database
    ranking score calculation
    auto-update status of shows

--- singles ---
timeline feed


--- extras ---
I would like to do something like Taiga for Ikanaide, though I feel like asking Taiga for Ikanaide implementation would be better at the start; taiga users could discover the website through the app.
If this ends up happening, I would never develop my own and instead promote theirs on the Ikanaide website.